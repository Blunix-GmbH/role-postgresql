- name: install Postgresql
  apt:
    name:
      - "postgresql-{{ postgresql_version }}"
      - python3-psycopg2
    state: present

- name: template custom settings to bottom of /etc/postgresql/postgresql_version/main/postgresql.conf
  blockinfile:
    path: "/etc/postgresql/{{ postgresql_version }}/main/postgresql.conf"
    block: |
      {% for postgresql_conf_key in postgresql_conf %}
      {{ postgresql_conf_key }} = '{{ postgresql_conf[postgresql_conf_key] }}'
      {% endfor %}
    marker: "# This block is managed by ansible ({mark})"
    insertafter: EOF
    owner: postgres
    group: postgres
    mode: 0640
  notify: restart postgresql
  when: postgresql_conf is defined

- name: configure authentication
  template:
    src: templates/etc/postgresql/all_versions/main/pg_hba.conf.j2
    dest: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
    owner: postgres
    group: postgres
    mode: 0600
  notify: restart postgresql
  when: postgresql_hba_conf is defined

- name: setup PostgreSQL databases
  postgresql_db:
    name: "{{ postgresql_database.name }}"
    state: "{{ postgresql_database.state | default('present') }}"
    login_host: "{{ postgresql_database.login_host | default('localhost') }}"
    login_password: "{{ postgresql_database.login_password | default(omit) }}"
    login_user: "{{ postgresql_database.login_user | default('postgres') }}"
    login_unix_socket: "{{ postgresql_database.login_unix_socket | default(postgresql_unix_socket_directories[0]) }}"
    port: "{{ postgresql_database.port | default(omit) }}"
    owner: "{{ postgresql_database.owner | default('postgres') }}"
    encoding: "{{ postgresql_database.encoding | default('UTF-8') }}"
    lc_collate: "{{ postgresql_database.lc_collate | default('en_US.UTF-8') }}"
    lc_ctype: "{{ postgresql_database.lc_ctype | default('en_US.UTF-8') }}"
    template: "{{ postgresql_database.template | default('template0') }}"
  with_items: "{{ postgresql_databases }}"
  loop_control:
    loop_var: postgresql_database
  when: postgresql_databases is defined
  become: True
  become_user: postgres
  vars:
    ansible_ssh_pipelining: True

- name: setup PostgreSQL users
  postgresql_user:
    name: "{{ postgresql_user.name }}"
    db: "{{ postgresql_user.db | default(omit) }}"
    state: "{{ postgresql_user.state | default('present') }}"
    password: "{{ postgresql_user.password | default(omit) }}"
    encrypted: "{{ postgresql_user.encrypted | default(omit) }}"
    login_host: "{{ postgresql_user.login_host | default('localhost') }}"
    login_password: "{{ postgresql_user.login_password | default(omit) }}"
    login_user: "{{ postgresql_user.login_user | default('postgres') }}"
    login_unix_socket: "{{ postgresql_user.login_unix_socket | default(postgresql_unix_socket_directories[0]) }}"
    port: "{{ postgresql_user.port | default(omit) }}"
    priv: "{{ postgresql_user.priv | default(omit) }}"
    role_attr_flags: "{{ postgresql_user.role_attr_flags | default(omit) }}"
  with_items: "{{ postgresql_users }}"
  loop_control:
    loop_var: postgresql_user
  when: postgresql_users is defined
  become: True
  become_user: postgres
  vars:
    ansible_ssh_pipelining: True
